name: Deploy to Production Server (Secure, No .env file)
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø—É—Ç–µ–π
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Create creds directory (if needed for rsync)
        run: mkdir -p gdrive_credentials

      - name: Write Google Drive credentials from Secrets
        run: |
          echo "${{ secrets.GDRIVE_JOHN_JSON }}" > gdrive_credentials/john.json
          echo "${{ secrets.GDRIVE_JANE_JSON }}" > gdrive_credentials/jane.json
          # ...–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞

      - name: Ensure deploy path exists & set ownership
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} \
            "mkdir -p ${{ env.DEPLOY_PATH }} && chown ${{ env.SERVER_USER }}:${{ env.SERVER_USER }} ${{ env.DEPLOY_PATH }}"

      - name: Sync project to server via rsync
        run: |
          rsync -az --info=progress2 --delete \
            --exclude '.git*' --exclude 'app/tests/' --exclude '.github/' \
            -e "ssh -o StrictHostKeyChecking=no" ./ \
            ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/

      - name: Deploy and Restart Services via stdin pipe
        id: deploy_step
        # –≠—Ç–∞ —Å–µ–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã —á–µ—Ä–µ–∑ stdin –Ω–∞–ø—Ä—è–º—É—é –≤ docker-compose
        run: |
          (
            echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}"
            echo "TELEGRAM_CHANNEL_ID=${{ secrets.TELEGRAM_CHANNEL_ID }}"
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}"
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}"
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}"
          ) | ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} 'bash -s' << 'EOF'
            # –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ.
            # –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Å–µ–∫—Ä–µ—Ç—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥.
            set -ex

            # –ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            cd ${{ env.DEPLOY_PATH }}

            echo "### 1. Pulling latest images... ###"
            docker compose pull

            echo "### 2. Stopping and removing old containers... ###"
            docker compose down --remove-orphans

            echo "### 3. Starting new containers with secrets from stdin... ###"
            # –ö–ª—é—á–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: --env-file - —á–∏—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ stdin (–∏–∑ –ø–∞–π–ø–ª–∞–π–Ω–∞)
            docker compose --env-file - up -d

            echo "### 4. Deployment successful! Showing running containers: ###"
            docker compose ps
          EOF

      - name: Show Docker logs on failure
        # –≠—Ç–æ—Ç —à–∞–≥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ ('deploy_step') –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
        if: failure()
        run: |
          echo "üî¥ Deployment failed. Fetching application logs from server..."
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "
            cd ${{ env.DEPLOY_PATH }}
            echo '--- Docker container statuses (docker compose ps -a) ---'
            docker compose ps -a
            echo '--- Last 50 lines of logs from each container (docker compose logs) ---'
            docker compose logs --tail=50
          "
